import { Schema, EntitySchema, RelationSchema, EntitiesByType, IdsByType, State } from './interfaces';
export declare class ModelSchemaReader {
    schema: Schema;
    entitySchemaReaders: Record<string, EntitySchemaReader>;
    private emptyState?;
    private emptyEntitiesByTypeState?;
    private emptyIdsByTypeState?;
    constructor(schema: Schema);
    typeExists(type: string): boolean;
    type(type: string): EntitySchemaReader;
    getEntities(): string[];
    getEmptyEntitiesByTypeState(): EntitiesByType;
    getEmptyIdsByTypeState(): IdsByType;
    getEmptyState<T extends State>(): T;
}
export declare class EntitySchemaReader {
    type: string;
    schema: EntitySchema;
    modelSchemaReader: ModelSchemaReader;
    constructor(type: string, schema: EntitySchema, modelSchemaReader: ModelSchemaReader);
    getType(): string;
    hasRelationKey(relationKey: string): boolean;
    resolveRelationKey(typeOrKey: string): string | undefined;
    resolveRelationType(typeOrKey: string): string | undefined;
    resolveRelationCardinality(typeOrKey: string): string | undefined;
    resolveRelationReciprocalKey(typeOrKey: string): string | undefined;
    resolveReciprocalCardinality(typeOrKey: string): string | undefined;
    getRelationKeys(): string[];
    relationSchemas(): RelationSchema[];
    getRelationSchema(relationKey: string): RelationSchema;
    getRelationCardinality(relationKey: string): string | undefined;
    getRelationType(relationKey: string): string | undefined;
    getRelationReciprocalKey(relationKey: string): string | undefined;
    getEmptyEntityState(emptyRels?: boolean): {
        [k: string]: any;
    };
    getEmptyRelationState(relationKey: string): never[] | undefined;
    private getRelationSchemaField;
}
