{"version":3,"file":"normalized-reducer.cjs.development.js","sources":["../src/enums.ts","../src/util.ts","../src/validator.ts","../src/schema.ts","../src/selectors.ts","../src/messages.ts","../src/actions.ts","../src/derivator.ts","../src/reducer.ts","../src/normalizr.ts","../src/index.ts"],"sourcesContent":["export enum Cardinalities {\n  ONE = 'one',\n  MANY = 'many',\n}\n\nexport enum UpdateActionMethod {\n  PUT = 'put',\n  PATCH = 'patch',\n}\n","export const noop = () => {};\n\nexport const arrayPut = <T>(item: T, array?: T[], index?: number): T[] => {\n  if (!array) {\n    return [item];\n  }\n\n  const newArray = [...array];\n  // must check against undefined because index might === 0\n  index === undefined ? newArray.push(item) : newArray.splice(index, 0, item);\n  return newArray;\n};\n\nexport function arrayMove<T>(arr: T[], fromIndex: number, toIndex: number): T[] {\n  if (fromIndex < 0 || toIndex < 0) {\n    return arr;\n  }\n\n  // if the fromIndex is greater than the highest index, then set it as the highest index\n  fromIndex = fromIndex > arr.length - 1 ? arr.length - 1 : fromIndex;\n\n  const newArray = [...arr];\n  const element = newArray[fromIndex];\n  newArray.splice(fromIndex, 1);\n  newArray.splice(toIndex, 0, element);\n\n  return newArray;\n}\n\nexport const isObjectLiteral = (v: any): v is object => {\n  return typeof v === 'object' && v !== null && !Array.isArray(v) && typeof v !== 'function';\n};\n\nexport const defaultNamespaced = (actionType: string) => `normalized/${actionType}`;\n","import { ModelSchemaReader } from './schema';\nimport { isObjectLiteral } from './util';\nimport { Schema } from './interfaces';\nimport { Cardinalities } from './enums';\n\nexport const validateSchema = (schema: Schema) => {\n  if (!isObjectLiteral(schema)) {\n    throw new Error('schema must be an object literal');\n  }\n\n  Object.entries(schema).forEach(([type, entitySchema]) => {\n    if (!isObjectLiteral(entitySchema)) {\n      throw new Error(`schema of type \"${type}\" must be an object literal`);\n    }\n\n    Object.entries(entitySchema).forEach(([rel, relSchema]) => {\n      if (!isObjectLiteral(relSchema)) {\n        throw new Error(`schema of type \"${type}\" relation \"${rel}\" must be an object literal`);\n      }\n\n      if (!relSchema.hasOwnProperty('type')) {\n        throw new Error(`schema of type \"${type}\" relation \"${rel}\" is missing \"type\" attribute`);\n      }\n\n      if (!schema.hasOwnProperty(relSchema.type)) {\n        throw new Error(\n          `schema of type \"${type}\" relation \"${rel}\" relates to type \"${relSchema.type}\", but type \"${relSchema.type}\" does not have an entity schema of its own`\n        );\n      }\n\n      if (!relSchema.hasOwnProperty('cardinality')) {\n        throw new Error(`schema of type \"${type}\" relation \"${rel}\" is missing \"cardinality\" attribute`);\n      }\n\n      if (relSchema.cardinality !== Cardinalities.MANY && relSchema.cardinality !== Cardinalities.ONE) {\n        throw new Error(\n          `schema of type \"${type}\" relation \"${rel}\" cardinality must be either \"${Cardinalities.ONE}\" or \"${Cardinalities.MANY}\"`\n        );\n      }\n\n      if (!relSchema.hasOwnProperty('reciprocal')) {\n        throw new Error(`schema of type \"${type}\" relation \"${rel}\" is missing \"reciprocal\" attribute`);\n      }\n\n      if (!schema[relSchema.type][relSchema.reciprocal]) {\n        throw new Error(\n          `schema of type \"${type}\" relation \"${rel}\" has a reciprocal of \"${relSchema.reciprocal}\" on type \"${relSchema.type}\", but \"${relSchema.type}\" does not have a relation \"${relSchema.reciprocal}\"`\n        );\n      }\n\n      if (\n        schema[relSchema.type][relSchema.reciprocal] &&\n        schema[relSchema.type][relSchema.reciprocal].reciprocal !== rel\n      ) {\n        throw new Error(\n          `schema of type \"${type}\" relation \"${rel}\" has a reciprocal of \"${relSchema.reciprocal}\" on type \"${relSchema.type}\", but \"${relSchema.reciprocal}\" does not point back to \"${rel}\"`\n        );\n      }\n    });\n  });\n};\n\n// returns type data clean of that type's rel keys\n// does not clean out keys that are rel type names\nexport const cleanData = (data: any, schema: ModelSchemaReader, type: string) => {\n  return typeof data === 'object'\n    ? Object.keys(data).reduce((cleanData, key) => {\n        if (!schema.type(type).hasRelationKey(key)) {\n          cleanData[key] = data[key];\n        }\n        return cleanData;\n      }, {} as { [key: string]: any })\n    : {};\n};\n","import { Schema, EntitySchema, RelationSchema, EntitiesByType, IdsByType, State } from './interfaces';\n\nimport { Cardinalities } from './enums';\n\nimport { validateSchema } from './validator';\n\nexport class ModelSchemaReader {\n  schema: Schema;\n  entitySchemaReaders: Record<string, EntitySchemaReader>;\n\n  // singleton values\n  private emptyState?: State;\n  private emptyEntitiesByTypeState?: EntitiesByType;\n  private emptyIdsByTypeState?: IdsByType;\n\n  constructor(schema: Schema) {\n    validateSchema(schema);\n\n    this.schema = schema;\n\n    this.entitySchemaReaders = Object.entries(schema).reduce((entitySchemaReaders, [type, entitySchema]) => {\n      entitySchemaReaders[type] = new EntitySchemaReader(type, entitySchema, this);\n      return entitySchemaReaders;\n    }, {} as Record<string, EntitySchemaReader>);\n  }\n\n  typeExists(type: string) {\n    return this.getEntities().includes(type);\n  }\n\n  type(type: string) {\n    return this.entitySchemaReaders[type];\n  }\n\n  getEntities() {\n    return Object.keys(this.schema);\n  }\n\n  getEmptyEntitiesByTypeState() {\n    if (!this.emptyEntitiesByTypeState) {\n      this.emptyEntitiesByTypeState = this.getEntities().reduce((emptyState, type) => {\n        emptyState[type] = {};\n        return emptyState;\n      }, {} as EntitiesByType);\n    }\n\n    return this.emptyEntitiesByTypeState;\n  }\n\n  getEmptyIdsByTypeState() {\n    if (!this.emptyIdsByTypeState) {\n      this.emptyIdsByTypeState = this.getEntities().reduce((idsState, type) => {\n        idsState[type] = [];\n        return idsState;\n      }, {} as IdsByType);\n    }\n\n    return this.emptyIdsByTypeState;\n  }\n\n  getEmptyState<T extends State>(): T {\n    if (!this.emptyState) {\n      this.emptyState = {\n        entities: this.getEmptyEntitiesByTypeState(),\n        ids: this.getEmptyIdsByTypeState(),\n      } as T;\n    }\n\n    return this.emptyState as T;\n  }\n}\n\nexport class EntitySchemaReader {\n  type: string;\n  schema: EntitySchema;\n  modelSchemaReader: ModelSchemaReader;\n\n  constructor(type: string, schema: EntitySchema, modelSchemaReader: ModelSchemaReader) {\n    this.type = type;\n    this.schema = schema;\n    this.modelSchemaReader = modelSchemaReader;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  hasRelationKey(relationKey: string) {\n    return this.getRelationKeys().includes(relationKey);\n  }\n\n  resolveRelationKey(typeOrKey: string) {\n    const hasRelationKey = this.hasRelationKey(typeOrKey);\n    if (hasRelationKey) {\n      return typeOrKey;\n    }\n\n    const relationType = typeOrKey;\n\n    // Iterate the relation schemas to find the one whose entity is the relationType.\n    // It is possible that multiple relation schemas point to the same type, and consequently,\n    // multiple keys would point to the type; in such a case we would return undefined.\n    let found = undefined;\n    for (let relationKey of this.getRelationKeys()) {\n      const relationSchema = this.getRelationSchema(relationKey);\n\n      if (relationSchema.type === relationType) {\n        if (found) {\n          // If a previously iterated relation schema has the given type\n          // then it means multiple relation schemas point to the given type,\n          // and a single key can be returned. For now, return undefined. Maybe\n          // later implement returning an array of keys.\n          return undefined;\n        }\n\n        // flag that a schema of the given type has been found\n        found = relationKey;\n      }\n    }\n\n    return found;\n  }\n\n  resolveRelationType(typeOrKey: string) {\n    // if given a key, then just get the type by key\n    const hasRelationKey = this.hasRelationKey(typeOrKey);\n    if (hasRelationKey) {\n      return this.getRelationType(typeOrKey);\n    }\n\n    // if given a type, then iterate each schema to see\n    // whether a relation schema contains the type,\n    // and if so the just return the type\n    const relationType = typeOrKey;\n    for (let relationSchema of this.relationSchemas()) {\n      if (relationSchema.type === relationType) {\n        return relationType;\n      }\n    }\n\n    return undefined;\n  }\n\n  resolveRelationCardinality(typeOrKey: string) {\n    const relationKey = this.resolveRelationKey(typeOrKey);\n    if (!relationKey) {\n      return undefined;\n    }\n\n    return this.getRelationCardinality(relationKey);\n  }\n\n  resolveRelationReciprocalKey(typeOrKey: string) {\n    const relationKey = this.resolveRelationKey(typeOrKey);\n    if (!relationKey) {\n      return undefined;\n    }\n\n    return this.getRelationReciprocalKey(relationKey);\n  }\n\n  resolveReciprocalCardinality(typeOrKey: string) {\n    const relationKey = this.resolveRelationKey(typeOrKey);\n    if (!relationKey) {\n      return undefined;\n    }\n\n    const relationType = this.getRelationType(relationKey);\n    const relationReciprocalKey = this.getRelationReciprocalKey(relationKey);\n\n    if (!relationType || !relationReciprocalKey) {\n      return undefined;\n    }\n\n    return this.modelSchemaReader.type(relationType).getRelationCardinality(relationReciprocalKey);\n  }\n\n  getRelationKeys() {\n    return Object.keys(this.schema);\n  }\n\n  relationSchemas(): RelationSchema[] {\n    return Object.values(this.schema);\n  }\n\n  getRelationSchema(relationKey: string): RelationSchema {\n    return this.schema[relationKey];\n  }\n\n  getRelationCardinality(relationKey: string) {\n    return this.getRelationSchemaField(relationKey, 'cardinality');\n  }\n\n  getRelationType(relationKey: string) {\n    return this.getRelationSchemaField(relationKey, 'type');\n  }\n\n  getRelationReciprocalKey(relationKey: string) {\n    return this.getRelationSchemaField(relationKey, 'reciprocal');\n  }\n\n  //\n  // state-getters\n  //\n\n  getEmptyEntityState(emptyRels?: boolean) {\n    if (!emptyRels) {\n      return {};\n    }\n\n    return Object.entries(this.schema).reduce((state, [reltype, relSchema]) => {\n      if (relSchema.cardinality === Cardinalities.ONE) {\n        state[reltype] = undefined;\n      }\n\n      if (relSchema.cardinality === Cardinalities.MANY) {\n        state[reltype] = [];\n      }\n\n      return state;\n    }, {} as { [k: string]: any });\n  }\n\n  getEmptyRelationState(relationKey: string) {\n    const cardinality = this.getRelationCardinality(relationKey);\n    return cardinality === Cardinalities.ONE ? undefined : [];\n  }\n\n  private getRelationSchemaField(relationKey: string, field: keyof RelationSchema) {\n    const relationSchema = this.getRelationSchema(relationKey);\n\n    if (!relationSchema) {\n      return undefined;\n    }\n\n    return relationSchema[field] as string;\n  }\n}\n","import { ModelSchemaReader } from './schema';\nimport {\n  Id,\n  State,\n  Selectors,\n  Entity,\n  GetAllAttachedIds,\n  SelectorTreeSchema,\n  EntityTreeNode,\n  PublicSelectors,\n  InternalSelectors,\n} from './interfaces';\n\nconst emptyIds: Id[] = [];\nconst emptyEntities = {};\n\nexport const makeSelectors = <S extends State>(schema: ModelSchemaReader): Selectors<S> => {\n  const getIds = (state: S, args: { type: string }): Id[] => {\n    const typeExists = schema.typeExists(args.type);\n    if (!typeExists) {\n      return emptyIds;\n    }\n\n    const ids = state.ids[args.type] as Id[];\n\n    return ids || emptyIds;\n  };\n\n  const getEntities = <E extends Entity>(state: S, args: { type: string }): Record<Id, E> => {\n    const typeExists = schema.typeExists(args.type);\n    if (!typeExists) {\n      return emptyEntities;\n    }\n\n    const entities = state.entities[args.type];\n\n    return (entities || emptyEntities) as Record<Id, E>;\n  };\n\n  const getEntity = <E extends Entity>(state: S, args: { type: string; id: Id }): E | undefined => {\n    const typeExists = schema.typeExists(args.type);\n    if (!typeExists) {\n      return undefined;\n    }\n\n    const entities = getEntities<E>(state, args);\n\n    return entities[args.id] as E;\n  };\n\n  const getAttached = <E extends Id[] | Id>(\n    state: S,\n    args: { type: string; id: Id; relation: string }\n  ): E | undefined => {\n    const entitySchema = schema.type(args.type);\n    if (!entitySchema) {\n      return undefined;\n    }\n\n    const relationKey = entitySchema.resolveRelationKey(args.relation);\n    if (!relationKey) {\n      return undefined;\n    }\n\n    const entity = getEntity(state, args);\n\n    if (!entity) {\n      return undefined;\n    }\n\n    return entity[relationKey];\n  };\n\n  const getAttachedIds = (state: S, args: { type: string; id: Id; relation: string }) => {\n    const { type, id, relation } = args;\n\n    const relationKey = schema.type(type).resolveRelationKey(relation);\n\n    if (!relationKey) {\n      return [];\n    }\n\n    const attached = getAttached(state, { type, id, relation: relationKey });\n\n    if (attached && typeof attached === 'string') {\n      return [attached];\n    }\n\n    if (attached && Array.isArray(attached)) {\n      return attached;\n    }\n\n    return [];\n  };\n\n  const getAllAttachedIds: GetAllAttachedIds<S> = (state, { type, id }) => {\n    const entitySchema = schema.type(type);\n    if (!entitySchema) {\n      return {};\n    }\n\n    const allAttachedIds: { [relationKey: string]: Id[] } = {};\n\n    const relationKeys = entitySchema.getRelationKeys();\n    for (let relationKey of relationKeys) {\n      const attachedIds = getAttachedIds(state, { type, id, relation: relationKey });\n      if (attachedIds.length) {\n        allAttachedIds[relationKey] = attachedIds;\n      }\n    }\n\n    return allAttachedIds;\n  };\n\n  const getEntityTree = (\n    state: S,\n    args: { type: string; id: Id; schema: SelectorTreeSchema }\n  ): EntityTreeNode[] => {\n    const { type, id, schema: selectorSchema } = args;\n\n    if (!schema.type(type)) {\n      return [];\n    }\n\n    const rootEntity = getEntity<S>(state, { type, id });\n\n    if (!rootEntity) {\n      return [];\n    }\n\n    const nodes = recursivelyGetNodes(state, type, id, selectorSchema);\n\n    return Object.values(nodes);\n  };\n\n  const recursivelyGetNodes = (\n    state: S,\n    type: string,\n    id: Id,\n    selectorSchema: SelectorTreeSchema,\n    nodes: Record<string, EntityTreeNode> = {}\n  ): Record<string, EntityTreeNode> => {\n    const entity = getEntity(state, { type, id });\n\n    if (!entity) {\n      return nodes;\n    }\n\n    nodes[`${type}.${id}`] = { id, type, entity };\n\n    if (typeof selectorSchema === 'function') {\n      selectorSchema = selectorSchema();\n    }\n\n    for (let [relation, nestedSelectorSchema] of Object.entries(selectorSchema)) {\n      const relationKey = schema.type(type).resolveRelationKey(relation);\n      const relationType = schema.type(type).resolveRelationType(relation);\n\n      if (relationKey && relationType) {\n        const attachedIds = getAttachedIds(state, { type, id, relation: relationKey });\n        for (let attachedId of attachedIds) {\n          recursivelyGetNodes(state, relationType, attachedId, nestedSelectorSchema, nodes);\n        }\n      }\n    }\n\n    return nodes;\n  };\n\n  return {\n    getIds,\n    getEntities,\n    getEntity,\n    getAttached,\n    getAllAttachedIds,\n    getEntityTree,\n  };\n};\n\nexport const getPublicSelectors = <S extends State>(selectors: Selectors<S>): PublicSelectors<S> => {\n  const { getIds, getEntities, getEntity } = selectors;\n\n  return {\n    getIds,\n    getEntities,\n    getEntity,\n  };\n};\n\nexport const getInternalSelectors = <S extends State>(selectors: Selectors<S>): InternalSelectors<S> => {\n  const { getEntityTree, getAllAttachedIds, getAttached } = selectors;\n\n  return {\n    getEntityTree,\n    getAllAttachedIds,\n    getAttached,\n  };\n};\n","export const entityTypeDne = (entityType: string) => `Entity-type \"${entityType}\" does not exist`;\n\nexport const relDne = (entityType: string, rel: string) =>\n  `Entity \"${entityType}\" does not have a relation named \"${rel}\"`;\n\nexport const indexLtZero = (name: string) => `${name} index is less than 0`;\n","import {\n  Id,\n  State,\n  Namespaced,\n  InvalidActionCreator,\n  AttachActionCreator,\n  AttachAction,\n  DetachActionCreator,\n  DetachAction,\n  DeleteAction,\n  DeleteActionCreator,\n  AnyAction,\n  ActionTypes,\n  SelectorTreeSchema,\n  CreateActionCreator,\n  CreateAction,\n  UpdateActionCreator,\n  UpdateAction,\n  MoveAction,\n  MoveActionCreator,\n  MoveAttachedAction,\n  MoveAttachedActionCreator,\n  SortActionCreator,\n  Entity,\n  Compare,\n  SortAttachedActionCreator,\n  BatchActionCreator,\n  SingularAction,\n  SortAction,\n  SetStateActionCreator,\n  InvalidAction,\n  SortAttachedAction,\n  BatchAction,\n} from './interfaces';\nimport { ModelSchemaReader } from './schema';\nimport * as messages from './messages';\nimport { UpdateActionMethod } from './enums';\nimport { cleanData } from './validator';\n\nexport const makeActions = <S extends State>(schema: ModelSchemaReader, namespaced: Namespaced) => {\n  const BATCH = namespaced('BATCH');\n  const INVALID = namespaced('INVALID');\n  const ATTACH = namespaced('ATTACH');\n  const DETACH = namespaced('DETACH');\n  const DELETE = namespaced('DELETE');\n  const CREATE = namespaced('CREATE');\n  const UPDATE = namespaced('UPDATE');\n  const MOVE = namespaced('MOVE');\n  const MOVE_ATTACHED = namespaced('MOVE_ATTACHED');\n  const SORT = namespaced('SORT');\n  const SORT_ATTACHED = namespaced('SORT_ATTACHED');\n  const SET_STATE = namespaced('SET_STATE');\n\n  const invalid: InvalidActionCreator = (action, error) => ({\n    type: INVALID,\n    error,\n    action,\n  });\n\n  const batch: BatchActionCreator = (\n    ...actions: (SingularAction | InvalidAction | BatchAction)[]\n  ): BatchAction => {\n    const flattened = flattenActions(actions);\n    return {\n      type: BATCH,\n      actions: flattened,\n    };\n  };\n\n  function flattenActions(\n    actions: (SingularAction | InvalidAction | BatchAction)[]\n  ): (SingularAction | InvalidAction)[] {\n    const accumulator: (SingularAction | InvalidAction)[] = [];\n\n    actions.forEach(action => {\n      if (action.type === BATCH) {\n        const batchAction = action as BatchAction;\n        const flattened = flattenActions(batchAction.actions);\n        accumulator.push(...flattened);\n      } else {\n        accumulator.push(action as SingularAction | InvalidAction);\n      }\n    });\n\n    return accumulator;\n  }\n\n  const attach: AttachActionCreator = (entityType, id, relation, attachableId, options = {}) => {\n    const action: AttachAction = {\n      type: ATTACH,\n      entityType,\n      id,\n      relation,\n      attachableId,\n      index: options.index,\n      reciprocalIndex: options.reciprocalIndex,\n    };\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    if (!schema.type(entityType).resolveRelationKey(relation)) {\n      return invalid(action, messages.relDne(entityType, relation));\n    }\n\n    return action;\n  };\n\n  const detach: DetachActionCreator = (entityType, id, relation, detachableId) => {\n    const action: DetachAction = {\n      type: DETACH,\n      entityType,\n      id,\n      relation,\n      detachableId,\n    };\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    if (!schema.type(entityType).resolveRelationKey(relation)) {\n      return invalid(action, messages.relDne(entityType, relation));\n    }\n\n    return action;\n  };\n\n  const del: DeleteActionCreator = (entityType, id, cascade?: SelectorTreeSchema) => {\n    const action: DeleteAction = {\n      type: DELETE,\n      entityType,\n      id,\n      cascade,\n    };\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    return action;\n  };\n\n  const create: CreateActionCreator = (entityType, id, data = {}, index?) => {\n    const action: CreateAction = {\n      type: CREATE,\n      entityType,\n      id,\n      data,\n      index,\n    };\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    // data must be an object with only non-relational attributes\n    action.data = cleanData(data, schema, entityType);\n\n    return action;\n  };\n\n  const update: UpdateActionCreator = (entityType, id, data, options = {}) => {\n    const action: UpdateAction = {\n      type: UPDATE,\n      entityType,\n      id,\n      data,\n      method: options.method || UpdateActionMethod.PATCH,\n    };\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    // data must be an object with only non-relational attributes\n    action.data = cleanData(data, schema, entityType);\n\n    return action;\n  };\n\n  const move: MoveActionCreator = (entityType, src, dest) => {\n    const action: MoveAction = {\n      type: MOVE,\n      entityType,\n      src,\n      dest,\n    };\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    if (src < 0) {\n      return invalid(action, messages.indexLtZero('source'));\n    }\n\n    if (dest < 0) {\n      return invalid(action, messages.indexLtZero('destination'));\n    }\n\n    return action;\n  };\n\n  const moveAttached: MoveAttachedActionCreator = (entityType, id, relation, src, dest) => {\n    const action: MoveAttachedAction = {\n      type: MOVE_ATTACHED,\n      entityType,\n      id,\n      relation,\n      src,\n      dest,\n    };\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    if (!schema.type(entityType).resolveRelationKey(relation)) {\n      return invalid(action, messages.relDne(entityType, relation));\n    }\n\n    if (src < 0) {\n      return invalid(action, messages.indexLtZero('source'));\n    }\n\n    if (dest < 0) {\n      return invalid(action, messages.indexLtZero('destination'));\n    }\n\n    return action;\n  };\n\n  const sort: SortActionCreator = <T extends Entity = Entity>(entityType: string, compare: Compare<T>) => {\n    const action = {\n      type: SORT,\n      entityType,\n      compare,\n    } as SortAction;\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action as SortAction, messages.entityTypeDne(entityType));\n    }\n\n    return action;\n  };\n\n  const sortAttached: SortAttachedActionCreator = <T extends Entity = Entity>(\n    entityType: string,\n    id: Id,\n    relation: string,\n    compare: Compare<T>\n  ) => {\n    const action = {\n      type: SORT_ATTACHED,\n      entityType,\n      id,\n      relation,\n      compare,\n    } as SortAttachedAction;\n\n    if (!schema.typeExists(entityType)) {\n      return invalid(action, messages.entityTypeDne(entityType));\n    }\n\n    if (!schema.type(entityType).resolveRelationKey(relation)) {\n      return invalid(action, messages.relDne(entityType, relation));\n    }\n\n    return action;\n  };\n\n  const setState: SetStateActionCreator<S> = (state: S) => {\n    return {\n      type: SET_STATE,\n      state,\n    };\n  };\n\n  const actionTypes = {\n    BATCH,\n    INVALID,\n    ATTACH,\n    DETACH,\n    DELETE,\n    CREATE,\n    UPDATE,\n    MOVE,\n    MOVE_ATTACHED,\n    SORT,\n    SORT_ATTACHED,\n    SET_STATE,\n  };\n\n  const actionCreators = {\n    batch,\n    attach,\n    detach,\n    delete: del,\n    create,\n    update,\n    move,\n    moveAttached,\n    sort,\n    sortAttached,\n    setState,\n  };\n\n  const actionUtils = new ActionUtils(actionTypes);\n\n  return {\n    actionTypes,\n    actionCreators,\n    actionUtils,\n  };\n};\n\nexport class ActionUtils {\n  actionTypes: ActionTypes;\n\n  constructor(actionTypes: ActionTypes) {\n    this.actionTypes = actionTypes;\n  }\n\n  isHandleable(action: AnyAction) {\n    return Object.values(this.actionTypes).includes(action.type);\n  }\n\n  isDerivable(action: AnyAction) {\n    const { DETACH, DELETE, ATTACH } = this.actionTypes;\n    return [DETACH, DELETE, ATTACH].includes(action.type);\n  }\n\n  isBatch(action: AnyAction) {\n    return action.type === this.actionTypes.BATCH;\n  }\n\n  isStateSetter(action: AnyAction) {\n    return action.type === this.actionTypes.SET_STATE;\n  }\n}\n","import {\n  Id,\n  State,\n  AnyAction,\n  DerivedAction,\n  ActionTypes,\n  AttachAction,\n  DetachAction,\n  Selectors,\n  ActionCreators,\n  DeleteAction,\n  InvalidAction,\n  EntityTreeNode,\n} from './interfaces';\n\nimport { Cardinalities } from './enums';\n\nimport { ModelSchemaReader } from './schema';\n\nexport default class Derivator<S extends State> {\n  actionTypes: ActionTypes;\n  actionCreators: ActionCreators<S>;\n  schema: ModelSchemaReader;\n  selectors: Selectors<S>;\n\n  constructor(\n    actionTypes: ActionTypes,\n    actionCreators: ActionCreators<S>,\n    schema: ModelSchemaReader,\n    selectors: Selectors<S>\n  ) {\n    this.actionTypes = actionTypes;\n    this.actionCreators = actionCreators;\n    this.schema = schema;\n    this.selectors = selectors;\n  }\n\n  public deriveAction(state: S, action: AnyAction): DerivedAction | AnyAction {\n    if (action.type === this.actionTypes.DETACH) {\n      const detachAction = action as DetachAction;\n      const derivedActions = this.deriveDetachActions(detachAction);\n      return {\n        type: action.type,\n        original: action,\n        derived: derivedActions,\n      } as DerivedAction<DetachAction>;\n    }\n\n    if (action.type === this.actionTypes.ATTACH) {\n      const attachAction = action as AttachAction;\n      const derivedActions = this.deriveAttachActions(state, attachAction);\n\n      return {\n        type: action.type,\n        original: action,\n        derived: derivedActions,\n      } as DerivedAction<AttachAction>;\n    }\n\n    if (action.type === this.actionTypes.DELETE) {\n      const deleteAction = action as DeleteAction;\n\n      // derive the actions that go along with deleting this entity\n      let derivedActions: (InvalidAction | DeleteAction | DetachAction)[] = [];\n\n      if (!deleteAction.cascade) {\n        derivedActions = this.deriveDeleteActions(state, deleteAction);\n      }\n\n      // if cascading deletion, then derive all those actions\n      if (deleteAction.cascade) {\n        const cascadeNodes: EntityTreeNode[] = this.selectors.getEntityTree(state, {\n          type: deleteAction.entityType,\n          id: deleteAction.id,\n          schema: deleteAction.cascade,\n        });\n\n        const cascadeActions: (InvalidAction | DeleteAction | DetachAction)[] = [];\n        cascadeNodes.forEach(({ id, type }) => {\n          const cascadeAction = this.actionCreators.delete(type, id);\n          if (cascadeAction.type === this.actionTypes.DELETE) {\n            const cascadeDeleteAction = cascadeAction as DeleteAction;\n            cascadeActions.push(...this.deriveDeleteActions(state, cascadeDeleteAction));\n          }\n        });\n\n        derivedActions.push(...cascadeActions);\n      }\n\n      return {\n        type: action.type,\n        original: action,\n        derived: derivedActions,\n      } as DerivedAction<DeleteAction>;\n    }\n\n    return action;\n  }\n\n  private deriveDetachActions(action: DetachAction): (DetachAction | InvalidAction)[] {\n    const { entityType, id, relation, detachableId } = action;\n\n    const schema = this.schema.type(entityType);\n\n    const relationType = schema.resolveRelationType(relation);\n    const reciprocalKey = schema.resolveRelationReciprocalKey(relation);\n\n    if (!relationType || !reciprocalKey) {\n      return [action];\n    }\n\n    const reciprocalAction = this.actionCreators.detach(relationType, detachableId, reciprocalKey, id);\n\n    return [action, reciprocalAction];\n  }\n\n  private deriveAttachActions(\n    state: S,\n    action: AttachAction\n  ): (AttachAction | DetachAction | InvalidAction)[] {\n    const { entityType, id, relation, attachableId } = action;\n\n    const schema = this.schema.type(entityType);\n\n    const relationType = schema.resolveRelationType(relation);\n    if (!relationType) {\n      return [];\n    }\n\n    // check existence of entity\n    const entity = this.selectors.getEntity(state, { type: entityType, id });\n    if (!entity) {\n      return [];\n    }\n\n    // check existence of attachable entity\n    const attachableEntity = this.selectors.getEntity(state, {\n      type: relationType,\n      id: attachableId,\n    });\n    const reciprocalKey = schema.resolveRelationReciprocalKey(relation);\n    if (!attachableEntity || !reciprocalKey) {\n      return [];\n    }\n\n    //\n    // make the attach-action\n    //\n    const relAttachAction = this.actionCreators.attach(relationType, attachableId, reciprocalKey, id, {\n      index: action.reciprocalIndex,\n      reciprocalIndex: action.index,\n    });\n\n    //\n    // make the detach-actions for the occupant entities\n    //\n    const entityDetachments = this.detachOccupant(state, entityType, id, relation);\n    const relEntityDetachments = this.detachOccupant(state, relationType, attachableId, reciprocalKey);\n\n    return [action, relAttachAction, ...entityDetachments, ...relEntityDetachments];\n  }\n\n  private deriveDeleteActions(\n    state: S,\n    action: DeleteAction\n  ): (InvalidAction | DeleteAction | DetachAction)[] {\n    const { entityType, id } = action;\n\n    const entitySchema = this.schema.type(entityType);\n    if (!entitySchema) {\n      return [];\n    }\n\n    // get all attached entities\n    const attachedIdsByRelationKey = this.selectors.getAllAttachedIds(state, {\n      type: entityType,\n      id,\n    });\n\n    // derive detachment actions\n    const detachActions: (DetachAction | InvalidAction)[] = Object.entries<Id[]>(\n      attachedIdsByRelationKey\n    ).reduce((allDetachActions, [relationKey, attachedIds]) => {\n      const relationType = entitySchema.resolveRelationType(relationKey);\n      if (!relationType) {\n        return allDetachActions;\n      }\n\n      const reciprocalKey = entitySchema.resolveRelationReciprocalKey(relationKey);\n      if (!reciprocalKey) {\n        return allDetachActions;\n      }\n\n      const detachActions = attachedIds.map(attachedId =>\n        this.actionCreators.detach(relationType, attachedId, reciprocalKey, id)\n      );\n\n      allDetachActions.push(...detachActions);\n\n      return allDetachActions;\n    }, [] as (DetachAction | InvalidAction)[]);\n\n    return [action, ...detachActions];\n  }\n\n  private detachOccupant(state: S, entityType: string, id: Id, relation: string) {\n    const schema = this.schema.type(entityType);\n    const relationType = schema.resolveRelationType(relation);\n    const relationReciprocalKey = schema.resolveRelationReciprocalKey(relation);\n    const cardinality = schema.resolveRelationCardinality(relation);\n\n    if (!relationType || !relationReciprocalKey || cardinality === Cardinalities.MANY) {\n      return [];\n    }\n\n    let occupantId = this.selectors.getAttached<Id>(state, {\n      type: entityType,\n      id,\n      relation,\n    });\n    if (!occupantId) {\n      return [];\n    }\n\n    return [\n      this.actionCreators.detach(entityType, id, relationType, occupantId),\n      this.actionCreators.detach(relationType, occupantId, relationReciprocalKey, id),\n    ];\n  }\n}\n","import {\n  ActionTypes,\n  AnyAction,\n  AttachAction,\n  BatchAction,\n  CreateAction,\n  DeleteAction,\n  DerivedAction,\n  DetachAction,\n  EntitiesByType,\n  Entity,\n  Id,\n  IdsByType,\n  InvalidAction,\n  MoveAction,\n  MoveAttachedAction,\n  SetStateAction,\n  SingularAction,\n  SortAction,\n  SortAttachedAction,\n  State,\n  UpdateAction,\n  Reducer,\n} from './interfaces';\nimport { ModelSchemaReader } from './schema';\nimport Derivator from './derivator';\nimport { ActionUtils } from './actions';\nimport { Cardinalities, UpdateActionMethod } from './enums';\nimport { arrayMove, arrayPut } from './util';\n\nexport const makeReducer = <S extends State>(\n  schema: ModelSchemaReader,\n  derivator: Derivator<S>,\n  actionTypes: ActionTypes,\n  actionUtils: ActionUtils\n) => {\n  const rootReducer: Reducer<S> = (state: S = schema.getEmptyState(), action: AnyAction): S => {\n    // if not handleable, then return state without changes\n    if (!actionUtils.isHandleable(action)) {\n      return state;\n    }\n\n    if (actionUtils.isStateSetter(action)) {\n      if (action.type === actionTypes.SET_STATE) {\n        return (action as SetStateAction<S>).state;\n      }\n    }\n\n    if (actionUtils.isBatch(action)) {\n      // with a batch action, reduce iteratively\n      const batchAction = action as BatchAction;\n      return batchAction.actions.reduce((prevState: S, action: SingularAction | InvalidAction) => {\n        return singularReducer(prevState, action);\n      }, state);\n    } else {\n      // with a singular action, reduce once\n      return singularReducer(state, action as SingularAction);\n    }\n  };\n\n  function singularReducer(state: S, action: SingularAction | InvalidAction): S {\n    const singularAction = action as SingularAction;\n\n    let actions: SingularAction[];\n    if (actionUtils.isDerivable(singularAction)) {\n      const derivedAction = derivator.deriveAction(state, singularAction) as DerivedAction;\n      actions = derivedAction.derived;\n    } else {\n      actions = [singularAction];\n    }\n\n    // reduce [action]\n    return actions.reduce((prevState: S, action: SingularAction) => {\n      // sort has to be handled here because it needs both slices\n      if (action.type === actionTypes.SORT) {\n        const { entityType, compare } = action as SortAction;\n\n        const ids = prevState.ids[entityType];\n        const entities = prevState.entities[entityType];\n        const sortedIds = [...ids].sort((idA, idB) => {\n          const entityA = entities[idA];\n          const entityB = entities[idB];\n\n          // comparison error will need to be handled in the future\n          // ...\n\n          return compare(entityA, entityB);\n        });\n\n        return {\n          entities: prevState.entities,\n          ids: {\n            ...prevState.ids,\n            [entityType]: sortedIds,\n          },\n        } as S;\n      }\n\n      // all other actions handled here\n      return {\n        entities: entitiesReducer(prevState.entities, action),\n        ids: idsReducer(prevState.ids, action),\n      } as S;\n    }, state);\n  }\n\n  const defaultEntitiesState = schema.getEmptyEntitiesByTypeState();\n  function entitiesReducer(\n    state: EntitiesByType = defaultEntitiesState,\n    action: SingularAction\n  ): EntitiesByType {\n    if (action.type === actionTypes.INVALID) {\n      return state;\n    }\n\n    if (!schema.typeExists(action.entityType)) {\n      return state; // if no such entityType, then no change\n    }\n\n    if (action.type === actionTypes.DETACH) {\n      const { entityType, id, detachableId, relation } = action as DetachAction;\n\n      const entity = state[entityType][id] as Entity;\n      if (!entity) {\n        return state; // if entity not found, then no change\n      }\n\n      const relationKey = schema.type(entityType).resolveRelationKey(relation);\n      if (!relationKey) {\n        return state; // if entity relation key not found, then no change\n      }\n\n      let newEntity = entity; // to contain the change immutably\n\n      const cardinality = schema.type(entityType).resolveRelationCardinality(relation);\n\n      if (cardinality === Cardinalities.ONE) {\n        const attachedId = entity[relationKey] as Id;\n\n        if (detachableId !== attachedId) {\n          return state; // if detachableId is not the attached id, then no change\n        }\n\n        // detach it: set the relation value to undefined\n        newEntity = { ...entity, [relationKey]: undefined };\n      }\n\n      if (cardinality === Cardinalities.MANY) {\n        const attachedIds = (entity[relationKey] || []) as Id[];\n\n        // detach it: filter out the detachableId\n        newEntity = {\n          ...entity,\n          [relationKey]: attachedIds.filter(attachedId => attachedId !== detachableId),\n        };\n      }\n\n      return {\n        ...state,\n        [entityType]: {\n          ...state[entityType],\n          [id]: newEntity,\n        },\n      };\n    }\n\n    if (action.type === actionTypes.ATTACH) {\n      const { entityType, id, attachableId, relation, index } = action as AttachAction;\n\n      const entity = state[entityType][id] as Entity;\n      if (!entity) {\n        return state; // if entity not found, then no change\n      }\n\n      const relationKey = schema.type(entityType).resolveRelationKey(relation);\n      if (!relationKey) {\n        return state; // if entity relation key not found, then no change\n      }\n\n      let newEntity = entity; // to contain the change immutably\n\n      const cardinality = schema.type(entityType).resolveRelationCardinality(relation);\n\n      if (cardinality === Cardinalities.ONE) {\n        newEntity = {\n          ...newEntity,\n          [relationKey]: attachableId,\n        };\n      }\n\n      if (cardinality === Cardinalities.MANY) {\n        if (!entity[relationKey] || !entity[relationKey].includes(attachableId)) {\n          newEntity = {\n            ...newEntity,\n            [relationKey]: arrayPut(attachableId, newEntity[relationKey], index),\n          };\n        }\n      }\n\n      return {\n        ...state,\n        [entityType]: {\n          ...state[entityType],\n          [id]: newEntity,\n        },\n      };\n    }\n\n    if (action.type === actionTypes.DELETE) {\n      const { entityType, id } = action as DeleteAction;\n\n      const entity = state[entityType][id] as Entity;\n      if (!entity) {\n        return state; // if entity not found, then no change\n      }\n\n      const entitiesOfType = { ...state[entityType] };\n      delete entitiesOfType[id];\n\n      return {\n        ...state,\n        [entityType]: entitiesOfType,\n      };\n    }\n\n    if (action.type === actionTypes.CREATE) {\n      const { entityType, id, data } = action as CreateAction;\n\n      const entity = state[entityType][id] as Entity;\n      if (entity) {\n        return state; // if entity exists, then no change\n      }\n\n      return {\n        ...state,\n        [entityType]: {\n          ...state[entityType],\n          [id]: data || {},\n        },\n      };\n    }\n\n    if (action.type === actionTypes.UPDATE) {\n      const { entityType, id, data, method } = action as UpdateAction;\n\n      const entity = state[entityType][id] as Entity;\n      if (!entity) {\n        return state; // if entity not found, then no change\n      }\n\n      let newEntity = { ...entity };\n\n      if (method === UpdateActionMethod.PUT) {\n        // extract the current relational data, so we have a copy of it and it won't get overwritten\n        const relationKeys = schema.type(entityType).getRelationKeys();\n        const relationalData = relationKeys.reduce((relationalData, relationKey) => {\n          if (entity[relationKey]) {\n            relationalData[relationKey] = entity[relationKey];\n          }\n          return relationalData;\n        }, {} as { [k: string]: Id | Id[] });\n\n        // replace the current entity with the update data and the relational data\n        newEntity = { ...data, ...relationalData };\n      }\n\n      if (method === UpdateActionMethod.PATCH) {\n        // merge the update data with the current data\n        newEntity = { ...entity, ...data };\n      }\n\n      return {\n        ...state,\n        [entityType]: {\n          ...state[entityType],\n          [id]: newEntity,\n        },\n      };\n    }\n\n    if (action.type === actionTypes.MOVE_ATTACHED) {\n      const { entityType, id, relation, src, dest } = action as MoveAttachedAction;\n\n      const entity = state[entityType][id] as Entity;\n      if (!entity) {\n        return state; // if entity not found, then no change\n      }\n\n      const relationKey = schema.type(entityType).resolveRelationKey(relation);\n      if (!relationKey) {\n        return state; // if entity relation key not found, then no change\n      }\n\n      const cardinality = schema.type(entityType).resolveRelationCardinality(relation);\n      if (cardinality === Cardinalities.ONE) {\n        return state; // if cardinality is one, then no change\n      }\n\n      const attachedIds = entity[relationKey];\n      if (!Array.isArray(attachedIds)) {\n        return state; // if attached ids is not an array, then no change\n      }\n\n      const newEntity = {\n        ...entity,\n        [relationKey]: arrayMove(attachedIds, src, dest),\n      };\n\n      return {\n        ...state,\n        [entityType]: {\n          ...state[entityType],\n          [id]: newEntity,\n        },\n      };\n    }\n\n    if (action.type === actionTypes.SORT_ATTACHED) {\n      const { entityType, id, relation, compare } = action as SortAttachedAction;\n\n      const entity = state[entityType][id] as Entity;\n      if (!entity) {\n        return state; // if entity not found, then no change\n      }\n\n      const relationKey = schema.type(entityType).resolveRelationKey(relation);\n      const relationType = schema.type(entityType).resolveRelationType(relation);\n      if (!relationKey || !relationType) {\n        return state; // if entity relation key or relation type not found, then no change\n      }\n\n      const cardinality = schema.type(entityType).resolveRelationCardinality(relation);\n      if (cardinality === Cardinalities.ONE) {\n        return state; // if cardinality is one, then no change\n      }\n\n      const attachedIds = entity[relationKey];\n      if (!Array.isArray(attachedIds)) {\n        return state; // if attached ids is not an array, then no change\n      }\n\n      const relatedEntities = state[relationType];\n      const sortedIds = [...attachedIds].sort((idA, idB) => {\n        const entityA = relatedEntities[idA];\n        const entityB = relatedEntities[idB];\n\n        // comparison error will need to be handled in the future\n        // ...\n\n        return compare(entityA, entityB);\n      });\n\n      const newEntity = {\n        ...entity,\n        [relationKey]: sortedIds,\n      };\n\n      return {\n        ...state,\n        [entityType]: {\n          ...state[entityType],\n          [id]: newEntity,\n        },\n      };\n    }\n\n    return state;\n  }\n\n  const defaultIdsState = schema.getEmptyIdsByTypeState();\n  function idsReducer(state: IdsByType = defaultIdsState, action: SingularAction): IdsByType {\n    if (action.type === actionTypes.INVALID) {\n      return state;\n    }\n\n    if (!schema.typeExists(action.entityType)) {\n      return state; // if no such entityType, then no change\n    }\n\n    if (action.type === actionTypes.DELETE) {\n      const { entityType, id } = action as DeleteAction;\n\n      const idsOfEntity = state[entityType].filter(existingId => existingId !== id);\n\n      return {\n        ...state,\n        [entityType]: idsOfEntity,\n      };\n    }\n\n    if (action.type === actionTypes.CREATE) {\n      const { entityType, id, index } = action as CreateAction;\n\n      // this O(n) operation can be improved if existence is checked\n      // in an O(c) lookup against the entities slice from one level up,\n      // and then set the existence boolean on the action\n      if (state[entityType].includes(id)) {\n        return state; // if entity exists, then no change\n      }\n\n      return {\n        ...state,\n        [entityType]: arrayPut(id, state[entityType], index),\n      };\n    }\n\n    if (action.type === actionTypes.MOVE) {\n      const { entityType, src, dest } = action as MoveAction;\n\n      return {\n        ...state,\n        [entityType]: arrayMove(state[entityType], src, dest),\n      };\n    }\n\n    return state;\n  }\n\n  return rootReducer;\n};\n","import { EntitiesByType, State, Entities } from './interfaces';\n\nexport interface NormalizrOutput {\n  entities: EntitiesByType;\n}\n\nexport const fromNormalizr = <T extends State>(data: NormalizrOutput): T => {\n  const { entities: entitiesByType } = data;\n\n  const state: State = {\n    entities: {},\n    ids: {},\n  };\n\n  Object.entries<Entities>(entitiesByType).forEach(([type, entities]) => {\n    state.entities[type] = entities;\n    state.ids[type] = Object.keys(entities);\n  });\n\n  return state as T;\n};\n","import { Schema, Namespaced, State } from './interfaces';\nimport { ModelSchemaReader } from './schema';\nimport { makeSelectors, getPublicSelectors } from './selectors';\nimport { makeActions } from './actions';\nimport Derivator from './derivator';\nimport { makeReducer } from './reducer';\n\nconst defaultNamespaced = (actionType: string) => `normalized/${actionType}`;\n\nconst makeNormalizedSlice = <S extends State>(schema: Schema, namespaced: Namespaced = defaultNamespaced) => {\n  const schemaReader = new ModelSchemaReader(schema);\n  const { actionTypes, actionCreators, actionUtils } = makeActions<S>(schemaReader, namespaced);\n  const allSelectors = makeSelectors<S>(schemaReader);\n  const selectors = getPublicSelectors<S>(allSelectors);\n  const emptyState = schemaReader.getEmptyState<S>();\n  const derivator = new Derivator<S>(actionTypes, actionCreators, schemaReader, allSelectors);\n  const reducer = makeReducer<S>(schemaReader, derivator, actionTypes, actionUtils);\n\n  return {\n    emptyState,\n    selectors,\n    actionTypes,\n    actionCreators,\n    reducer,\n  };\n};\n\nexport * from './interfaces';\nexport * from './enums';\nexport * from './normalizr';\n\nexport default makeNormalizedSlice;\n"],"names":["Cardinalities","UpdateActionMethod","arrayPut","item","array","index","newArray","undefined","push","splice","arrayMove","arr","fromIndex","toIndex","length","element","isObjectLiteral","v","Array","isArray","validateSchema","schema","Error","Object","entries","forEach","type","entitySchema","rel","relSchema","hasOwnProperty","cardinality","MANY","ONE","reciprocal","cleanData","data","keys","reduce","key","hasRelationKey","ModelSchemaReader","entitySchemaReaders","EntitySchemaReader","typeExists","getEntities","includes","getEmptyEntitiesByTypeState","emptyEntitiesByTypeState","emptyState","getEmptyIdsByTypeState","emptyIdsByTypeState","idsState","getEmptyState","entities","ids","modelSchemaReader","getType","relationKey","getRelationKeys","resolveRelationKey","typeOrKey","relationType","found","relationSchema","getRelationSchema","resolveRelationType","getRelationType","relationSchemas","resolveRelationCardinality","getRelationCardinality","resolveRelationReciprocalKey","getRelationReciprocalKey","resolveReciprocalCardinality","relationReciprocalKey","values","getRelationSchemaField","getEmptyEntityState","emptyRels","state","reltype","getEmptyRelationState","field","emptyIds","emptyEntities","makeSelectors","getIds","args","getEntity","id","getAttached","relation","entity","getAttachedIds","attached","getAllAttachedIds","allAttachedIds","relationKeys","attachedIds","getEntityTree","selectorSchema","rootEntity","nodes","recursivelyGetNodes","nestedSelectorSchema","attachedId","getPublicSelectors","selectors","entityTypeDne","entityType","relDne","indexLtZero","name","makeActions","namespaced","BATCH","INVALID","ATTACH","DETACH","DELETE","CREATE","UPDATE","MOVE","MOVE_ATTACHED","SORT","SORT_ATTACHED","SET_STATE","invalid","action","error","batch","actions","flattened","flattenActions","accumulator","batchAction","attach","attachableId","options","reciprocalIndex","messages","detach","detachableId","del","cascade","create","update","method","PATCH","move","src","dest","moveAttached","sort","compare","sortAttached","setState","actionTypes","actionCreators","actionUtils","ActionUtils","isHandleable","isDerivable","isBatch","isStateSetter","Derivator","deriveAction","detachAction","derivedActions","deriveDetachActions","original","derived","attachAction","deriveAttachActions","deleteAction","deriveDeleteActions","cascadeNodes","cascadeActions","cascadeAction","cascadeDeleteAction","reciprocalKey","reciprocalAction","attachableEntity","relAttachAction","entityDetachments","detachOccupant","relEntityDetachments","attachedIdsByRelationKey","detachActions","allDetachActions","map","occupantId","makeReducer","derivator","rootReducer","prevState","singularReducer","singularAction","derivedAction","sortedIds","idA","idB","entityA","entityB","entitiesReducer","idsReducer","defaultEntitiesState","newEntity","filter","entitiesOfType","PUT","relationalData","relatedEntities","defaultIdsState","idsOfEntity","existingId","fromNormalizr","entitiesByType","defaultNamespaced","actionType","makeNormalizedSlice","schemaReader","allSelectors","reducer"],"mappings":"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"}