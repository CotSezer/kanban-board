import { State, Namespaced, AttachActionCreator, DetachActionCreator, DeleteActionCreator, AnyAction, ActionTypes, CreateActionCreator, UpdateActionCreator, MoveActionCreator, MoveAttachedActionCreator, SortActionCreator, SortAttachedActionCreator, BatchActionCreator, SetStateActionCreator } from './interfaces';
import { ModelSchemaReader } from './schema';
export declare const makeActions: <S extends State>(schema: ModelSchemaReader, namespaced: Namespaced) => {
    actionTypes: {
        BATCH: string;
        INVALID: string;
        ATTACH: string;
        DETACH: string;
        DELETE: string;
        CREATE: string;
        UPDATE: string;
        MOVE: string;
        MOVE_ATTACHED: string;
        SORT: string;
        SORT_ATTACHED: string;
        SET_STATE: string;
    };
    actionCreators: {
        batch: BatchActionCreator;
        attach: AttachActionCreator;
        detach: DetachActionCreator;
        delete: DeleteActionCreator;
        create: CreateActionCreator;
        update: UpdateActionCreator;
        move: MoveActionCreator;
        moveAttached: MoveAttachedActionCreator;
        sort: SortActionCreator;
        sortAttached: SortAttachedActionCreator;
        setState: SetStateActionCreator<S>;
    };
    actionUtils: ActionUtils;
};
export declare class ActionUtils {
    actionTypes: ActionTypes;
    constructor(actionTypes: ActionTypes);
    isHandleable(action: AnyAction): boolean;
    isDerivable(action: AnyAction): boolean;
    isBatch(action: AnyAction): boolean;
    isStateSetter(action: AnyAction): boolean;
}
